from pysimmmulator.helpers import (
    basic_parameters,
    baseline_parameters,
    ad_spend_parameters,
    media_parameters,
)

import numpy as np
import pandas as pd

import logging
import logging.config

logging.config.fileConfig("./logging.conf")
logger = logging.getLogger("pysimmmulator")


class simulate:
    """Takes input of basic params and provies either piece meal or single shot 
    creation of MMM data using a config file,"""
    def __init__(self, basic_params: basic_parameters):
        self.basic_params = basic_params

    def simulate_baseline(
        self,
        base_p,
        trend_p: int,
        temp_var: int,
        temp_coef_mean: int,
        temp_coef_sd: int,
        error_std: int,
    ) -> None:
        self.baseline_params = baseline_parameters(
            basic_params=self.basic_params,
            base_p=base_p,
            trend_p=trend_p,
            temp_var=temp_var,
            temp_coef_mean=temp_coef_mean,
            temp_coef_sd=temp_coef_sd,
            error_std=error_std,
        )

        # Number of days to generate data for
        days = np.arange(0, self.basic_params.years * 365)
        # Base sales of base_p units
        base = np.zeros(shape=self.basic_params.years * 365) + self.baseline_params.base_p
        # Trend of trend_p extra units per day
        trend_cal = (self.baseline_params.trend_p / (self.basic_params.years * 365)) * self.baseline_params.base_p
        trend = trend_cal * days
        # Temperature generated by a sin function and we can manipulate how much the sin function goes up or down with temp_var
        temp = self.baseline_params.temp_var * np.sin(days * 3.14 / 182.5)
        # coefficient of temperature's effect on sales will be a random variable with normal distribution
        seasonality = (
            np.random.normal(loc=self.baseline_params.temp_coef_mean, scale=self.baseline_params.temp_coef_sd, size=1)
            * temp
        )
        # add some noise to the trend
        error = np.random.normal(
            loc=0, scale=self.baseline_params.error_std, size=self.basic_params.years * 365
        )
        # Generate series for baseline sales
        baseline_sales = base + trend + seasonality + error
        # if error term makes baseline_sales negative, make it 0
        baseline_sales = np.where(baseline_sales < 0, 0, baseline_sales)

        self.baseline_sales_df = pd.DataFrame(
            {
                "days": days,
                "baseline_sales": baseline_sales,
                "base": base,
                "trend": trend,
                "temp": temp,
                "seasonality": seasonality,
                "error": error,
            }
        )

    def simulate_ad_spend(
        self,
        campaign_spend_mean: int,
        campaign_spend_std: int,
        max_min_proportion_on_each_channel: dict,
    ) -> None:
        ad_spend_params = ad_spend_parameters(
            campaign_spend_mean=campaign_spend_mean,
            campaign_spend_std=campaign_spend_std,
            max_min_proportion_on_each_channel=max_min_proportion_on_each_channel,
        )

        campaign_count = int(
            self.basic_params.years * 365 / self.basic_params.frequency_of_campaigns
        )

        # specify amount spent on each campaign according to a normal distribution
        campaign_spends = np.random.normal(
            loc=ad_spend_params.campaign_spend_mean,
            scale=ad_spend_params.campaign_spend_std,
            size=campaign_count,
        )
        # if campaign spend number is negative, automatically make it 0
        campaign_spends[campaign_spends < 0] = 0
        campaign_channel_spend_proportions = {}
        for (
            channel,
            proportions,
        ) in ad_spend_params.max_min_proportion_on_each_channel.items():
            campaign_channel_spend_proportions[channel] = np.random.uniform(
                low=proportions["min"],
                high=proportions["max"],
                size=campaign_count,
            )

        spend_df = pd.DataFrame(
            {
                "campaign_id": np.arange(campaign_count),
                "total_campaign_spend": campaign_spends,
            }
        )

        for channel in max_min_proportion_on_each_channel.keys():
            spend_df[channel] = (
                campaign_spends * campaign_channel_spend_proportions[channel]
            )

        self.spend_df = spend_df.melt(
            id_vars=["campaign_id", "total_campaign_spend"],
            value_vars=self.basic_params.all_channels,
            var_name="channel",
            value_name="spend_channel",
        )
        logging.info("You have completed running step 2: Simulating ad spend.")

    def simulate_media(
        self, true_cpm: dict, true_cpc: dict, noisy_cpm_cpc: dict
    ) -> None:
        media_params = media_parameters(true_cpm, true_cpc, noisy_cpm_cpc)
        media_params.check(basic_params=self.basic_params)
        
        for channel in media_params.noise_channels:
            channel_true_cpm_value = true_cpm[channel] if channel in true_cpm.keys() else 0
            self.spend_df.loc[(self.spend_df["channel"] == channel).index,'true_cpm'] = channel_true_cpm_value

            channel_true_cpc_value = true_cpc[channel] if channel in true_cpc.keys() else 0
            self.spend_df.loc[(self.spend_df["channel"] == channel).index,'true_cpc'] = channel_true_cpc_value
        

        

    def run_with_config(self):
        import pysimmmulator.load_parameters as load_params
        self.simulate_baseline(**load_params.cfg['baseline_params'])
        self.simulate_ad_spend(**load_params.cfg["ad_spend_params"])
        self.simulate_media(**load_params.cfg["media_params"])
